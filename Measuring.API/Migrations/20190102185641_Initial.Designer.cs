// <auto-generated />
using System;
using Measuring.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Measuring.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190102185641_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Measuring.API.Models.MeasuredValue", b =>
                {
                    b.Property<int>("MeasuredValueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("MeasuredTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("SensorId");

                    b.Property<float>("Value");

                    b.HasKey("MeasuredValueId");

                    b.HasIndex("SensorId");

                    b.ToTable("MeasuredValue");
                });

            modelBuilder.Entity("Measuring.API.Models.Sensor", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MeasuredValue");

                    b.Property<string>("Name");

                    b.Property<string>("PhysicalSensorId");

                    b.Property<int>("ShieldId");

                    b.HasKey("SensorId");

                    b.HasIndex("ShieldId");

                    b.ToTable("Sensor");
                });

            modelBuilder.Entity("Measuring.API.Models.Shield", b =>
                {
                    b.Property<int>("ShieldId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IP");

                    b.Property<string>("Location");

                    b.Property<string>("MAC");

                    b.Property<string>("Name");

                    b.Property<string>("PhysicalShieldId");

                    b.HasKey("ShieldId");

                    b.ToTable("Shield");
                });

            modelBuilder.Entity("Measuring.API.Models.ShieldConfiguration", b =>
                {
                    b.Property<int>("ShieldConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeepSleep");

                    b.Property<int>("ShieldId");

                    b.HasKey("ShieldConfigurationId");

                    b.HasIndex("ShieldId")
                        .IsUnique();

                    b.ToTable("ShieldConfiguration");
                });

            modelBuilder.Entity("Measuring.API.Models.MeasuredValue", b =>
                {
                    b.HasOne("Measuring.API.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Measuring.API.Models.Sensor", b =>
                {
                    b.HasOne("Measuring.API.Models.Shield", "Shield")
                        .WithMany("Sensors")
                        .HasForeignKey("ShieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Measuring.API.Models.ShieldConfiguration", b =>
                {
                    b.HasOne("Measuring.API.Models.Shield", "Shield")
                        .WithOne("ShieldConfiguration")
                        .HasForeignKey("Measuring.API.Models.ShieldConfiguration", "ShieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
